
class Numbers:
         def __init__(self):
                 self.cur=0
                 self.next=1

         def genfunction(self):
                 while True:
                         self.next, self.cur = self.next+self.cur, self.next
                         yield(self.cur)
def main():
        fib=Numbers()
        mygenerator = fib.genfunction()

        while True:
                for i,j in zip(mygenerator, range(10)):
                        print(i)

                yn=input("Continue ? : ")
                if yn!='Y' and yn!='y':
                        break

main()


#Why are generators better than iterators?
#You can implement your own iterator using a python class; a generator does not need a class in python.
#To write a python generator, you can either use a Python function or a comprehension. But for an iterator, you must use the iter() and next() functions.
#Generator in python let us write fast and compact code. They are also simpler to code than do custom iterator.
